/** THEMES **/

/* Light mode (default) */

:root {
  --bg: hsl(0 0% 98%);

  --fg: hsl(0 0% 5%);
  --fg-h1: hsl(230 50% 50%);
  --fg-h2: hsl(230 40% 65%);
  --fg-pitch-em: hsl(350 70% 25%);

  --pitch-em: hsl(125 70% 30%);

  --code-border: hsl(270 100% 50%);
  --code-linenum: hsl(0 0% 60%);
  --code-tab: hsl(0 0% 85%);

  --syn-argument: hsl(275 18% 45%);
  --syn-binding: hsl(36 100% 42%);
  --syn-binding-line: hsl(36 100% 80%);
  --syn-bool: hsl(180 100% 35%);
  --syn-command: hsl(213 100% 35%);
  --syn-escape: hsl(190 100% 26%);
  --syn-field: hsl(360 57% 47%);
  --syn-fn: hsl(32 52% 40%);
  --syn-keyword: hsl(214 45% 47%);
  --syn-macro: hsl(117 100% 25%);
  --syn-path: hsl(0 0% 30%);
  --syn-prompt: hsl(320 100% 30%);
  --syn-punct: hsl(0 0% 40%);
  --syn-sigil: hsl(191 54% 37%);
  --syn-string: hsl(72 100% 27%);
  --syn-subcommand: hsl(200 100% 40%);
  --syn-trait: hsl(253 86% 65%);
  --syn-type: hsl(318 44% 47%);
}

/* Dark mode */

@media (prefers-color-scheme: dark) {
  :root {
    --bg: hsl(0 5% 10%);
    --fg: hsl(120 100% 98%);

    --pitch-em: hsl(60 100% 66%);

    --code-border: hsl(90 80% 40%);
    --code-linenum: hsl(0 0% 30%);
    --code-tab: hsl(0 0% 15%);

    --syn-argument: hsl(275 70% 70%);
    --syn-binding: hsl(36 100% 60%);
    --syn-binding-line: hsl(36 100% 35%);
    --syn-bool: hsl(180 80% 55%);
    --syn-command: hsl(213 100% 70%);
    --syn-escape: hsl(190 70% 66%);
    --syn-field: hsl(360 70% 60%);
    --syn-fn: hsl(32 70% 70%);
    --syn-keyword: hsl(214 65% 55%);
    --syn-macro: hsl(117 100% 40%);
    --syn-path: hsl(0 0% 60%);
    --syn-prompt: hsl(320 100% 45%);
    --syn-punct: hsl(0 0% 70%);
    --syn-sigil: hsl(191 55% 65%);
    --syn-string: hsl(72 75% 55%);
    --syn-subcommand: hsl(200 100% 80%);
    --syn-trait: hsl(253 60% 73%);
    --syn-type: hsl(318 90% 75%);
  }
}


/** COLOURS **/

html {
  background: var(--bg);
  color: var(--fg);
}

h1 { color: var(--fg-h1); }
h2 { color: var(--fg-h2); }

a { color: var(--a-normal); }
a:active { color: var(--a-active); }
a:visited { color: var(--a-visited); }

.pitch em {
  background: var(--pitch-em);
  color: var(--bg);
}


/** LAYOUT **/


/** TYPO **/

:root {
  --mono: Iosevka, "Fira Code", Consolas, "Comic Code", ui-monospace, monospace;
  --sans: "Noto Sans", "San Francisco", Grandview, ui-sans-serif, sans-serif;
  --serif: "Noto Serif", Georgia, ui-serif, serif;

  --code-block-fs: 1.2;
  --code-line-fs: 1.5;
}

html {
  font-family: var(--sans);

  /** line-height: normal ~= 1.2 **/
  /** big sample block of code = 40 lines + some margin ~= 50 **/
  font-size: clamp(0.666rem, calc(100vh / (50 * var(--code-block-fs) * 1.2)), 2rem);
}

h1 {
  font-size: 3rem;
  font-weight: 400;
}

h2 {
  font-size: 2rem;
  font-weight: 500;
}

p {
  font-family: var(--serif);
}

kbd {
  font-family: var(--mono);
}

.pitch {
  font-size: 1.1rem;
  line-height: 1.75;
}

.pitch em {
  border-radius: 0.2em;
  display: inline-block;
  line-height: 1;
  padding: 0.1em 0.3em;
  transform: rotate(-5deg);
}

/** PLACES **/

/** CODE **/

code {
  font-family: var(--mono);
}

/* Layouts */

code.oneline {
  display: block;
  padding: 0.25rem 1rem;
  font-size: calc(var(--code-line-fs) * 1rem);
  border: 0.4rem double var(--code-border);
  margin: 2rem;
  border-radius: 0.5rem;
  width: max-content;
}

code ol.codeblock {
  font-size: calc(var(--code-block-fs) * 1rem);
  list-style-type: decimal-leading-zero;
  padding: 0.6em 2.7em;
  width: max-content;
  border: 0.4rem double var(--code-border);
  margin: 2rem;
  border-radius: 0.5rem;
}

code ol.codeblock ::marker {
  color: var(--code-linenum);
}


/* Tabs */

code .tab {
  display: inline-block;
  width: 4ch;
}

code .tab::after {
  content: 'â†’';
  color: var(--code-tab);
}


/* Shell */

.oneline.shell { padding-left: 0.5rem; }

.shell .argument { color: var(--syn-argument); }
.shell .command { color: var(--syn-command); }
.shell .prompt { color: var(--syn-prompt); }
.shell .subcommand { color: var(--syn-subcommand); }


/* Rust */

.rust .binding {
  color: var(--syn-binding);
  text-decoration: underline var(--syn-binding-line) 2px;
}

.rust .bool { color: var(--syn-bool); }
.rust .escape { color: var(--syn-escape); }
.rust .field { color: var(--syn-field); }
.rust .fn { color: var(--syn-fn); }
.rust .keyword { color: var(--syn-keyword); }
.rust .macro { color: var(--syn-macro); }
.rust .path { color: var(--syn-path); }
.rust .punct { color: var(--syn-punct); }
.rust .sigil { color: var(--syn-sigil); }
.rust .string { color: var(--syn-string); }
.rust .trait { color: var(--syn-trait); }
.rust .type { color: var(--syn-type); }

